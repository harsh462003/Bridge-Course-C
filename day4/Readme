# Day 4 - C Programming Solutions

This repository contains solutions to C programming problems focusing on set operations with arrays.

## Files Structure

- `header.h` - Header file with function declarations
- `day4_operations.c` - Implementation of set operation functions
- `main.c` - Main program with test cases

## Problems Solved ✅

### Set Operations on Integer Arrays
Implementation of basic set operations between two integer arrays:

#### Functions Implemented:

**1. Set Intersection**
- Function: `intersection(int arr[], int s1, int arr2[], int s2)`
- Finds common elements between two arrays
- Example: A={1,2,3,5,6,7,8}, B={2,3,5,7,9} → Intersection: {2,3,5,7}

**2. Set Difference (A - B)**
- Function: `setdifference(int arr[], int s1, int arr2[], int s2)`
- Finds elements present in first array but not in second
- Example: A={1,2,3,5,6,7,8}, B={2,3,5,7,9} → Difference: {1,6,8}

**3. Set Union**
- Function: `union_set(int arr[], int s1, int arr2[], int s2)`
- Combines elements from both arrays
- **Note**: Current implementation has a logical error - it includes duplicates

#### Helper Functions:

**Element Check**
- Function: `checkelement(int arr[], int s, int ele)`
- Checks if an element exists in an array

**Array Print**
- Function: `printarr(int arr[], int s)`
- Prints all elements in an array

## Test Case

The program tests with:
- Array A: {1, 2, 3, 5, 6, 7, 8}
- Array B: {2, 3, 5, 7, 9}

Expected Results:
- **Intersection**: {2, 3, 5, 7}
- **Set Difference (A-B)**: {1, 6, 8}
- **Union**: {1, 2, 3, 5, 6, 7, 8, 9} *(currently has bug)*
