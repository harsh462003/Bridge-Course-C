# Day 4 - C Programming Solutions

This repository contains solutions to C programming problems focusing on set operations with arrays.

## Files Structure

- `header.h` - Header file with function declarations
- `day4_operations.c` - Implementation of set operation functions
- `main.c` - Main program with test cases

## Problems Solved ✅

### Set Operations on Integer Arrays
Implementation of basic set operations between two integer arrays:

#### Functions Implemented:

**1. Set Intersection**
- Function: `intersection(int arr[], int s1, int arr2[], int s2)`
- Finds common elements between two arrays
- Example: A={1,2,3,5,6,7,8}, B={2,3,5,7,9} → Intersection: {2,3,5,7}

**2. Set Difference (A - B)**
- Function: `setdifference(int arr[], int s1, int arr2[], int s2)`
- Finds elements present in first array but not in second
- Example: A={1,2,3,5,6,7,8}, B={2,3,5,7,9} → Difference: {1,6,8}

**3. Set Union**
- Function: `union_set(int arr[], int s1, int arr2[], int s2)`
- Combines elements from both arrays
- **Note**: Current implementation has a logical error - it includes duplicates

#### Helper Functions:

**Element Check**
- Function: `checkelement(int arr[], int s, int ele)`
- Checks if an element exists in an array

**Array Print**
- Function: `printarr(int arr[], int s)`
- Prints all elements in an array

### Matrix Operations

**1. Matrix Construction and Display**
- Function: `matrix_insert(int row, int col, int arr[][col])`
- Function: `display_matrix(int row, int col, int arr[][col])`
- Creates and displays a matrix with sequential values

**2. Matrix Transpose**
- Function: `transpose_matrix(int row, int col, int arr[][col], int output[][row])`
- Finds transpose of an N×M matrix
- Converts rows to columns and vice versa

**3. Column Sum**
- Function: `sum_column(int row, int col, int arr[][col])`
- Calculates sum of each column in the matrix

**4. Sparse Matrix Check**
- Function: `sparse_matrix(int row, int col, int arr[][col])`
- Checks if matrix is sparse (zeros > (n×m)/2)
- Returns 1 if sparse, 0 otherwise

### Macros

**1. Integer Concatenation**
- Macro: `CONCAT(a,b)` → `a##b`
- Concatenates two integer values
- Example: CONCAT(123,456) → 123456

**2. Square of Number**
- Macro: `SQUARE(a)` → `(a*a)` *(has precedence issues)*
- Macro: `SQUARE1(a)` → `((a)*(a))` *(safer version)*
- Calculates square of a number

## Test Cases

### Set Operations Test:
- Array A: {1, 2, 3, 5, 6, 7, 8}
- Array B: {2, 3, 5, 7, 9}

Expected Results:
- **Intersection**: {2, 3, 5, 7}
- **Set Difference (A-B)**: {1, 6, 8}
- **Union**: {1, 2, 3, 5, 6, 7, 8, 9} *(currently has bug)*

### Matrix Operations Test:
- 3×3 matrix with values 0-8
- Transpose operation
- Column sum calculation
- Sparse matrix check with test matrices

## How to Compile and Run

```bash
gcc main.c day4_operations.c -o day4_program
./day4_program
```

## Current Status

- **Completed**: Set operations, Matrix operations, and Macros
- **Functionality**: Arrays, matrices, and preprocessor macros
- **Code Quality**: Functional implementations with noted areas for improvement
